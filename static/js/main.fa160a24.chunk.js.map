{"version":3,"sources":["reducers/pages.tsx","actions/actionTypes.tsx","reducers/levels.tsx","actions/actions.tsx","components/main/main.tsx","reducers/initialState.tsx","components/game/gamePage.tsx","components/auth/loginPage.tsx","components/App.tsx","serviceWorker.ts","reducers/rootReducer.tsx","reducers/mainReducer.tsx","store/Store.tsx","index.tsx"],"names":["AppPages","ActionTypes","Levels","levelId","levelName","levelWords","worldsCount","hiddenWordsCount","locked","tempStyle","MainPage","_this","this","react_default","a","createElement","className","map","level","key","style","onClick","event","props","changePage","GAME_PAGE","React","Component","mapDispatchToProps","newPage","dispatch","stopPropagation","type","CHANGE_PAGE","payload","connect","allState","levels","gameState","init","pageName","MAIN_PAGE","tableStyle","width","tdStyle","border","GamePage","randomNumber","n","Math","floor","random","makeNumberSudoku","arr","Array","i","length","numbers","finish","row","rowNumbers","concat","_loop","col","colNumbers","Object","toConsumableArray","_loop2","element","filter","value","thisNum","splice","undefined","makeWordSudoku","wordArray","numArray","console","log","num","words","index","id","ele","index2","state","find","x","LoginPage","App","renderPage","main","gamePage","AUTH_PAGE","loginPage_LoginPage","TransitionGroup","CSSTransition","in","appear","timeout","classNames","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","combineReducers","arguments","initialState","action","objectSpread","middleware","thunk","enhancer","composeWithDevTools","composeEnhancers","applyMiddleware","apply","store","createStore","rootReducer","ReactDOM","render","es","src_components_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fa160a24.chunk.js","sourcesContent":["export enum AppPages {\r\n    MAIN_PAGE = \"mainPage\",\r\n    GAME_PAGE = \"gamePage\",\r\n    AUTH_PAGE = \"authPage\",\r\n}","\r\nexport enum ActionTypes {\r\n    CHANGE_PAGE = \"CHANGE_PAGE\",\r\n    CHANGE_STAGE = \"CHANGE_STAGE\",\r\n    PAUSE_GAME = \"PAUSE_GAME\",\r\n    RESUME_PAGE = \"RESUME_PAGE\"\r\n}","\r\nexport interface ILevel {\r\n    levelId: number;\r\n    levelName: string;\r\n    levelWords: Array<string>;\r\n    worldsCount: number;\r\n    hiddenWordsCount: number;\r\n    locked: boolean;\r\n}\r\n\r\nexport const Levels:ILevel[] = [\r\n    {\r\n        levelId: 1,\r\n        levelName: \"مرحله تستی کوچک\",\r\n        levelWords: [\"brave\",\"clever\",\"cruel\"],\r\n        worldsCount:3,\r\n        hiddenWordsCount:2,\r\n        locked:false\r\n    },\r\n    {\r\n        levelId: 2,\r\n        levelName: \"مرحله تستی بزرگ\",\r\n        levelWords: [\"brave\",\"clever\",\"cruel\",\"funny\",\"selfish\",\"lazy\",\"person\",\"kind\",\"shy\"],\r\n        worldsCount:9,\r\n        hiddenWordsCount:20,\r\n        locked:false\r\n    }\r\n];\r\n","import { ActionTypes } from \"./actionTypes\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AppPages } from \"../reducers/pages\";\r\n\r\n// export const scorePage = () => dispatch => {\r\n//     //...\r\n//     dispatch({\r\n//         type: SCORE_PAGE,\r\n//         payload: []\r\n//     })\r\n// }\r\n\r\nexport const changePage: Function =\r\n    (event: React.MouseEvent<HTMLButtonElement>, newPage: AppPages, levelId: number) => (dispatch: Dispatch) => {\r\n\r\n    event.stopPropagation();\r\n    dispatch({\r\n        type: ActionTypes.CHANGE_PAGE,\r\n        payload: { levelId, newPage },\r\n    });\r\n};\r\n\r\n/*\r\nexport const changeStage =\r\n    (event: React.MouseEvent<HTMLButtonElement>,stageId:string, score:number, backgroundPic:string) => (dispatch:Dispatch) => {\r\n\r\n    event.stopPropagation();\r\n    // console.log('changeStage actions', event, stageId, score,backgroundPic);\r\n    dispatch({\r\n        type: ActionTypes.CHANGE_STAGE,\r\n        payload: { stageId, score,backgroundPic }\r\n    })\r\n}\r\n/*\r\n/*\r\nexport const pauseGame = (event:React.MouseEvent<HTMLButtonElement>, show:boolean = true) => (dispatch:Dispatch) => {\r\n\r\n    event.stopPropagation();\r\n    dispatch({\r\n        type: show ? ActionTypes.PAUSE_GAME : ActionTypes.RESUME_PAGE,\r\n        payload: { isPaused: show }\r\n    })\r\n}\r\n*/","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { IState } from \"../../reducers/initialState\";\r\nimport { ILevel, Levels } from \"../../reducers/levels\";\r\nimport { changePage } from \"../../actions/actions\";\r\nimport { AppPages } from \"../../reducers/pages\";\r\n\r\ninterface IStateProps {\r\n    levels?: ILevel[];\r\n    changePage?: Function;\r\n}\r\n\r\nconst tempStyle: any = {\r\n    // width: \"30%\"\r\n};\r\n\r\nclass MainPage extends React.Component<IStateProps, any> {\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"container\">\r\n                <h5>صفحه اصلی</h5>\r\n                this is main page\r\n                <div className=\"row\">\r\n                    {Levels.map(level=>\r\n                        <div key={ level.levelId } className=\"col\">\r\n                            <div className=\"card\" style={tempStyle}>\r\n                                <div className=\"card-body\">\r\n                                    <h5 className=\"card-title\">{level.levelName} </h5>\r\n                                    <p className=\"card-text\">{level.worldsCount} * {level.worldsCount}</p>\r\n                                    <button\r\n                                        onClick={event => this.props.changePage!(event, AppPages.GAME_PAGE,level.levelId)}\r\n                                        className=\"btn btn-primary\">Play (not work yet)</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps: any = (allState: { gameState: IState }) => ({\r\n    levels: allState.gameState.levels,\r\n});\r\n\r\nconst mapDispatchToProps:any = ({\r\n    changePage: changePage\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(MainPage);\r\n\r\n\r\n","import { AppPages } from \"./pages\";\r\nimport { ILevel,Levels } from \"./levels\";\r\n\r\n/*\r\nexport class chapters {\r\n  levelId: number;\r\n  levelName: string;\r\n  levelPic: string;\r\n\r\n  constructor(levelId: number, levelName: string, levelPic: string) {\r\n    this.levelId = levelId;\r\n    this.levelName = levelName;\r\n    this.levelPic = levelPic;\r\n  }\r\n}\r\n*/\r\n\r\nexport interface IState {\r\n  pageName: AppPages;\r\n  levels: ILevel[];\r\n  levelId: number;\r\n  /*\r\n  score: number,\r\n  backgroundPic: string,\r\n\r\n  music: string,\r\n  // audio?: HTMLAudioElement,\r\n\r\n  headerTitle: string,\r\n  currentLevelId: number,// number\r\n  currentStage?: stage,// number\r\n\r\n  // gameData: any,\r\n  achievment: any,\r\n  saveChoise: any[],\r\n  // thisLevelChoises:any[]\r\n\r\n  pageName: string,\r\n  pageSetting: appPage,\r\n\r\n  isPaused: boolean,\r\n\r\n  chaptersInfo: chapters[],\r\n  */\r\n}\r\n\r\n// initialState\r\nconst init: IState = {\r\n  pageName: AppPages.MAIN_PAGE,\r\n  levels: Levels,\r\n  levelId: 1\r\n/*\r\n  score: 0,\r\n  backgroundPic: gameData.startPage.backgroundPic,// ''\r\n\r\n  music: gameData.startPage.music,//'',\r\n  // restartMusic:true,\r\n  // audio: undefined, // use component instead of that\r\n\r\n  headerTitle:\"\",\r\n  currentLevelId: 0,\r\n  currentStage: undefined,\r\n\r\n  // gameData: gameData, // can delete and import and use only on reducer\r\n  achievment: {},\r\n  saveChoise: [],\r\n\r\n  pageName: \"startPage\",\r\n  pageSetting: gameData.startPage,\r\n  isPaused: false,\r\n  // muteMusic: false,\r\n\r\n  chaptersInfo: gameData.levels.map(level => new chapters(level.levelId, level.levelName, level.levelPic))\r\n  */\r\n};\r\n\r\nexport default init;\r\n\r\n// export const allLevels:Function = (state: IState) => state.levels;\r\nexport const findThisLevel:Function = (state: IState) => state.levels.find(x=>x.levelId === state.levelId);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { IState, findThisLevel } from \"../../reducers/initialState\";\r\nimport { ILevel } from \"../../reducers/levels\";\r\n\r\ninterface IStateProps {\r\n    level?: ILevel;\r\n}\r\n\r\nconst tableStyle: any = {\r\n    width: \"100%\"\r\n};\r\n\r\nconst tdStyle: any = {\r\n    border: \"1px solid black\"\r\n};\r\n\r\nclass GamePage extends React.Component<IStateProps, any> {\r\n\r\n    randomNumber = (n: number) => Math.floor(Math.random() * n);\r\n\r\n    makeNumberSudoku = (n: number) => {\r\n\r\n        var arr: Array<Array<number>> = new Array(n);\r\n        for (let i: number = 0; i < arr.length; i++) {\r\n            arr[i] = new Array(n);\r\n        }\r\n\r\n        let numbers: Array<number> = new Array(n);\r\n        for (let i: number = 0; i < n; i++) {\r\n            numbers[i] = i;\r\n        }\r\n\r\n        let finish:boolean = false;\r\n\r\n        while(!finish){\r\n            finish = true;\r\n\r\n            for (let row: number = 0; row < n; row++) {\r\n\r\n                let rowNumbers: Array<number> = [...numbers];\r\n                \r\n                for (let col: number = 0; col < n; col++) {\r\n                    let colNumbers: Array<number> = [...rowNumbers];\r\n    \r\n                    for (let i: number = 0; i < row; i++) {\r\n                        const element: number = arr[i][col];\r\n                        colNumbers = colNumbers.filter(value => value !== element);\r\n                    }\r\n                    const thisNum = colNumbers.splice(this.randomNumber(colNumbers.length), 1)[0];\r\n                    if(thisNum === undefined){\r\n                        finish=false;\r\n                        break;\r\n                    }\r\n                    arr[row][col] = thisNum;\r\n                    rowNumbers = rowNumbers.filter(value => value !== thisNum);\r\n                }\r\n                if(!finish){\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n        \r\n\r\n        return arr;\r\n    }\r\n\r\n    makeWordSudoku = (wordArray: Array<string>) => {\r\n        const length: number = wordArray.length;\r\n        const numArray: Array<Array<number>> = this.makeNumberSudoku(length);\r\n        console.log(numArray)\r\n\r\n        var arr: Array<Array<string>> = new Array(length);\r\n        for (let i: number = 0; i < arr.length; i++) {\r\n            arr[i] = new Array(length);\r\n        }\r\n\r\n        for (let row: number = 0; row < length; row++) {\r\n            for (let col: number = 0; col < length; col++) {\r\n                const num:number = numArray[row][col];\r\n                arr[row][col] = wordArray[num];\r\n            }\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const words: Array<string> = this.props.level?this.props.level.levelWords:[];\r\n        const arr: Array<Array<string>> = this.makeWordSudoku(words);\r\n        console.log(arr)\r\n        return (\r\n            <div>\r\n                <h4>this is game page</h4>\r\n\r\n                <table style={tableStyle}>\r\n                    {arr.map((row,index) =>\r\n                        <tr id={\"row_\"+index} key={\"row_\"+index}>\r\n                            {row.map((ele,index2) =>\r\n                                <td id={index +\"_\" +index2+\"_\"+ele} key={index +\"_\" +index2+\"_\"+ele} style={tdStyle}>\r\n                                    {ele}\r\n                                </td>\r\n                                )}\r\n                        </tr>\r\n                    )}\r\n                </table>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps: any = (allState: { gameState: IState }) => ({\r\n    level: findThisLevel(allState.gameState)\r\n});\r\n\r\nexport default connect(mapStateToProps)(GamePage);\r\n\r\n/*\r\n\r\nfunction make2dArray(n){\r\n    var arr = new Array(n);\r\n    for (let i = 0; i < arr.length; i++) {\r\n        arr[i]  = new Array(n);\r\n    }\r\n    return arr;\r\n}\r\n\r\nfunction showInTable(arr, htmlElementId){\r\n    var table = '<table>';\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n\r\n        table += '<tr>';\r\n        const row = arr[i];\r\n\r\n        for (let j = 0; j < row.length; j++) {\r\n            const element = row[j];\r\n\r\n            table += '<td>'+element+ '<td>';\r\n\r\n        }\r\n\r\n        table += '</tr>';\r\n    }\r\n\r\n    table += '</table>';\r\n\r\n    var ele = document.getElementById(htmlElementId);\r\n    if(ele){\r\n        ele.innerHTML = table;\r\n    }\r\n}\r\n\r\n// var a = make2dArray(2);\r\n// a[0][0] = 1;\r\n// a[0][1] = 2;\r\n// a[1][0] = 3;\r\n// a[1][1] = 4;\r\n// console.log(a);\r\n// showInTable(a,'table')\r\n\r\nfunction makeNumberSudoku(n=3) {\r\n    var arr = make2dArray(n);\r\n\r\n    let numbers = new Array(n);\r\n    for (let i = 0; i < n; i++) {\r\n        numbers[i] = i;\r\n    }\r\n\r\n    for (let row = 0; row < n; row++) {\r\n\r\n        let rowNumbers = [... numbers];\r\n\r\n        for (let col = 0; col < n; col++) {\r\n            let colNumbers = [... rowNumbers];\r\n\r\n            for (let i = 0; i < row; i++) {\r\n                const element = arr[i][col];\r\n                colNumbers = colNumbers.filter(function(value){return value!=element;});\r\n            }\r\n\r\n            arr[row][col]= colNumbers.splice(randomNumber(colNumbers.length),1);\r\n            rowNumbers = rowNumbers.filter(function(value){return value!=arr[row][col];})\r\n        }\r\n    }\r\n\r\n    return arr;\r\n}\r\n\r\nconst randomNumber = n => Math.floor(Math.random() * n);\r\n\r\n// fillSudoku(5)\r\n\r\nfunction makeWordSudoku(wordArray) {\r\n    const length = wordArray.length;\r\n    numArray = makeNumberSudoku(length);\r\n\r\n    var arr = make2dArray(length);\r\n    for (let row = 0; row < length; row++) {\r\n        for (let col = 0; col < length; col++) {\r\n            arr[row][col] = wordArray[numArray[row][col]];\r\n        }\r\n    }\r\n\r\n    return arr;\r\n}\r\n*/","import React from \"react\";\r\n\r\ninterface IStateProps {\r\n  }\r\n\r\nexport default class LoginPage extends React.Component<IStateProps, any> {\r\n    render():JSX.Element {\r\n        return (\r\n            <div>\r\n                this is login page\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { AppPages } from \"../reducers/pages\";\nimport { IState } from \"../reducers/initialState\";\nimport { connect } from \"react-redux\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport MainPage from \"./main/main\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport GamePage from \"./game/gamePage\";\nimport LoginPage from \"./auth/loginPage\";\n\ninterface IStateProps {\n  pageName?: AppPages;\n}\n\ninterface IDispatchProps {\n}\nclass App extends React.Component<IStateProps & IDispatchProps, any> {\n  renderPage = (pageName?: AppPages): React.ReactNode => {\n    // console.log('app.tsx pageName',pageName);\n    switch (pageName) {\n      case AppPages.MAIN_PAGE:\n        return <MainPage />;\n\n      case AppPages.GAME_PAGE:\n        return <GamePage />;\n\n      case AppPages.AUTH_PAGE:\n        return <LoginPage />;\n\n      default:\n        return <MainPage />;\n    }\n  }\n\n  render(): JSX.Element {\n    return (\n      <TransitionGroup className=\"App\">\n\n        <CSSTransition\n          key={this.props.pageName}\n          in={true}\n          appear={true}\n          timeout={1200}\n          classNames=\"fade\"\n        >\n          {this.renderPage(this.props.pageName)}\n        </CSSTransition>\n\n      </TransitionGroup>\n    );\n  }\n}\n\nconst mapStateToProps: any = (allState: { gameState: IState }) => ({\n  pageName: allState.gameState.pageName,\n});\n\nexport default connect(mapStateToProps)(App);\n\n\n\n\n/*\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n*/\n\n/*\n<body>\n    <div id=\"table\"></div>\n</body>\n<script>\n\nfunction make2dArray(n){\n    var arr = new Array(n);\n    for (let i = 0; i < arr.length; i++) {\n        arr[i]  = new Array(n);\n    }\n    return arr;\n}\n\nfunction showInTable(arr, htmlElementId){\n    var table = '<table>';\n\n    for (let i = 0; i < arr.length; i++) {\n\n        table += '<tr>';\n        const row = arr[i];\n\n        for (let j = 0; j < row.length; j++) {\n            const element = row[j];\n\n            table += '<td>'+element+ '<td>';\n\n        }\n\n        table += '</tr>';\n    }\n\n    table += '</table>';\n\n    var ele = document.getElementById(htmlElementId);\n    if(ele){\n        ele.innerHTML = table;\n    }\n}\n\n// var a = make2dArray(2);\n// a[0][0] = 1;\n// a[0][1] = 2;\n// a[1][0] = 3;\n// a[1][1] = 4;\n// console.log(a);\n// showInTable(a,'table')\n\nfunction makeNumberSudoku(n=3) {\n    var arr = make2dArray(n);\n\n    let numbers = new Array(n);\n    for (let i = 0; i < n; i++) {\n        numbers[i] = i;\n    }\n\n    for (let row = 0; row < n; row++) {\n\n        let rowNumbers = [... numbers];\n\n        for (let col = 0; col < n; col++) {\n            let colNumbers = [... rowNumbers];\n\n            for (let i = 0; i < row; i++) {\n                const element = arr[i][col];\n                colNumbers = colNumbers.filter(function(value){return value!=element;});\n            }\n\n            arr[row][col]= colNumbers.splice(randomNumber(colNumbers.length),1);\n            rowNumbers = rowNumbers.filter(function(value){return value!=arr[row][col];})\n        }\n    }\n\n    return arr;\n}\n\nconst randomNumber = n => Math.floor(Math.random() * n);\n\n// fillSudoku(5)\n\nfunction makeWordSudoku(wordArray) {\n    const length = wordArray.length;\n    numArray = makeNumberSudoku(length);\n\n    var arr = make2dArray(length);\n    for (let row = 0; row < length; row++) {\n        for (let col = 0; col < length; col++) {\n            arr[row][col] = wordArray[numArray[row][col]];\n        }\n    }\n\n    return arr;\n}\n\nvar arr = ['cat','dog','sheep']\nvar s = makeWordSudoku(arr);\n//console.log(s);\nshowInTable(s,'table')\n\n</script>\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nimport { combineReducers } from \"redux\";\r\nimport MainReducer from \"./mainReducer\";\r\n\r\nexport default combineReducers({\r\n   // mainReducer\r\n   gameState: MainReducer\r\n});","import initialState, { IState } from \"./initialState\";\r\nimport { ActionTypes } from \"../actions/actionTypes\";\r\nimport { AppPages } from \"./pages\";\r\n\r\nexport default function MainReducer(state: IState = initialState, action: { type: any; payload: any }): any {\r\n\r\n  switch (action.type) {\r\n    case ActionTypes.CHANGE_PAGE:\r\n\r\n      const newPage: any = action.payload.newPage;\r\n      if (newPage === AppPages.GAME_PAGE) {\r\n        return {\r\n          ...state,\r\n          pageName: action.payload.newPage,\r\n          levelId: action.payload.levelId\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        pageName: newPage\r\n      };\r\n    /*\r\n        case ActionTypes.CHANGE_PAGE:\r\n          // console.log('change page reducer');//, action.payload);\r\n\r\n          if (!action.payload.levelId) {\r\n\r\n            let newPage = action.payload.newPage;\r\n            let pageSetting = (gameData as any)[newPage] as appPage;\r\n            let pageTitle = pageSetting.pageTitle;\r\n\r\n            return {\r\n              ...state,\r\n\r\n              backgroundPic: pageSetting.backgroundPic,\r\n              music: pageSetting.music,\r\n\r\n              headerTitle: pageTitle,\r\n              // currentLevelId:\r\n              //currentStage\r\n\r\n              saveChoise: [...state.saveChoise, {\r\n                action: ActionTypes.CHANGE_PAGE,\r\n                page: newPage\r\n              }],\r\n\r\n              pageName: newPage,\r\n              pageSetting,\r\n\r\n              isPaused: false,\r\n              //chaptersInfo:\r\n            }\r\n          }\r\n\r\n          let thisLevel = gameData.levels.find(level => level.levelId === action.payload.levelId) || gameData.levels[0];\r\n          let music = thisLevel.backgroundMusic;\r\n\r\n          return {\r\n            ...state,\r\n\r\n            backgroundPic: thisLevel.levelPic,\r\n            music,\r\n\r\n            headerTitle: thisLevel.levelName,\r\n            currentLevelId: thisLevel.levelId,\r\n            currentStage: thisLevel.stages.find(stage => stage.stageId === 1),\r\n\r\n            saveChoise: [...state.saveChoise, {\r\n              action: ActionTypes.CHANGE_PAGE,\r\n              page: action.payload.newPage,\r\n              levelId: action.payload.levelId\r\n            }],\r\n\r\n            pageName: action.payload.newPage,\r\n            // pageSetting,\r\n\r\n            isPaused: false,\r\n            //chaptersInfo:\r\n          }\r\n\r\n        case ActionTypes.CHANGE_STAGE:\r\n          //console.log('change stage reducer');\r\n\r\n          let stageId = action.payload.stageId;\r\n          if (!stageId) {\r\n            stageId = (state.currentStage ? state.currentStage.stageId : 0 )+ 1;\r\n          }\r\n\r\n          let score = state.score;\r\n          if (action.payload.score) {\r\n            score += action.payload.score;\r\n          }\r\n\r\n          //let currentStage = state.currentLevel? state.currentLevel.stages.find(stage => stage.stageId === stageId):null;\r\n          //let currentStage = state.currentLevelId? state.currentLevel.stages.find(stage => stage.stageId === stageId):null;\r\n          let currentlevel = gameData.levels.find(level => level.levelId === state.currentLevelId);\r\n          let currentStage = currentlevel && currentlevel.stages.find(stage => stage.stageId === stageId);\r\n\r\n          if (!currentStage) {\r\n            console.log('can not find stage'); // TODO: Score Page\r\n            return {\r\n              ...state,\r\n\r\n              pageName: 'chapterPage', // or end stage score page\r\n              saveChoise: [...state.saveChoise, {\r\n                action: ActionTypes.CHANGE_STAGE,\r\n                stage: 'cannot find stage. maybe end of stage'\r\n              }],\r\n            }\r\n          }\r\n\r\n          let backgroundPic = state.backgroundPic;\r\n          if (action.payload.backgroundPic && action.payload.backgroundPic !== '') {\r\n            backgroundPic = action.payload.backgroundPic;\r\n          }\r\n\r\n          if (currentStage.optionsSection && currentStage.backgroundPic && currentStage.backgroundPic !== '') {\r\n            console.log(\"change\");\r\n            backgroundPic = currentStage.backgroundPic;\r\n          }\r\n\r\n          return {\r\n            ...state,\r\n            currentStage,\r\n            score,\r\n            backgroundPic,\r\n            saveChoise: [...state.saveChoise, {\r\n              action: ActionTypes.CHANGE_STAGE,\r\n              stageId: stageId\r\n            }],\r\n          }\r\n\r\n        case ActionTypes.PAUSE_GAME:\r\n          console.log('pause game reducer');\r\n          return {\r\n            ...state,\r\n            isPaused: true,\r\n            //items: action.payload\r\n          }\r\n\r\n        case ActionTypes.RESUME_PAGE:\r\n          console.log('resume game reducer');\r\n          return {\r\n            ...state,\r\n            isPaused: false,\r\n            //items: action.payload\r\n          }*/\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n    createStore,\r\n    // compose,\r\n    applyMiddleware,\r\n  } from \"redux\";\r\n\r\n  import thunk from \"redux-thunk\";\r\n  import rootReducer from \"../reducers/rootReducer\";\r\n  import { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\n  const initialState:object = {};\r\n\r\n  const middleware:Array<any> = [thunk];\r\n\r\n  const composeEnhancers:any = composeWithDevTools({\r\n    // specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n  });\r\n\r\n  const enhancer:any = composeEnhancers(\r\n    applyMiddleware(...middleware),\r\n    // other store enhancers if any\r\n  );\r\n\r\n  const store: any = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    enhancer\r\n  );\r\n  export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/Store';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}